{"version":3,"sources":["App.tsx","components/Good.tsx","components/GooodsList.tsx","index.tsx"],"names":["SortType","Good","name","GoodsList","goods","map","good","indexOf","goodsFromServer","getReorderedGoods","sortType","isReversed","visibleGoods","ALPHABET","sort","g1","g2","localeCompare","LENGTH","length","reverse","App","useState","setIsReversed","NONE","setSortType","isLight","buttonBaseClasses","alphabeticalButtonClasses","lengthButtonClasses","reverseButtonClasses","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0DCdQC,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KACrB,OAAO,oBAAI,UAAQ,OAAZ,SAAoBA,KCChBC,EAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAC1B,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAMJ,KAAMI,GAAWF,EAAMG,QAAQD,UFJjDE,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAUK,SAASC,EACdL,EACAM,EACAC,GAGA,IAAMC,EAAY,YAAOR,GAQzB,OANIM,IAAaV,EAASa,SACxBD,EAAaE,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGE,cAAcD,MACtCN,IAAaV,EAASkB,QAC/BN,EAAaE,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGI,OAASH,EAAGG,UAGxCR,EAAaC,EAAaQ,UAAYR,G,SArB1CZ,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAwBE,IAAMqB,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOX,EAAP,KAAmBY,EAAnB,KACA,EAAgCD,mBAAStB,EAASwB,MAAlD,mBAAOd,EAAP,KAAiBe,EAAjB,KACMC,EAAU,WACVC,EAAoB,aACpBC,EAAyB,eAAWlB,IAAaV,EAASa,SAAWa,EAAU,IAC/EG,EAAmB,kBAAcnB,IAAaV,EAASkB,OAASQ,EAAU,IAC1EI,EAAoB,kBAAcnB,EAAa,GAAKe,GAkB1D,OACE,sBAAKK,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,UAAKJ,GAAL,OAAyBC,GAClCK,QAvBmB,WACzBR,EAAYzB,EAASa,WAmBjB,iCAQA,wBACEmB,KAAK,SACLD,UAAS,UAAKJ,GAAL,OAAyBE,GAClCI,QA3Ba,WACnBR,EAAYzB,EAASkB,SAuBjB,4BAQA,wBACEc,KAAK,SACLD,UAAS,UAAKJ,GAAL,OAAyBG,GAClCG,QA/BQ,WACdV,GAAeZ,IA2BX,sBAQED,IAAaV,EAASwB,MAAQb,IAC9B,wBACEqB,KAAK,SACLD,UAAS,UAAKJ,EAAL,kBAAgCD,GACzCO,QApCI,WACZV,GAAc,GACdE,EAAYzB,EAASwB,OA+Bf,sBAUJ,cAAC,EAAD,CACEpB,MAAOK,EAAkBD,EAAiBE,EAAUC,SGvG5DuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ed59b9e1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodsList } from './components/GooodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort((g1, g2) => g1.localeCompare(g2));\n  } else if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((g1, g2) => g1.length - g2.length);\n  }\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const isLight = 'is-light';\n  const buttonBaseClasses = 'button is-';\n  const alphabeticalButtonClasses = `info ${sortType !== SortType.ALPHABET ? isLight : ''}`;\n  const lengthButtonClasses = `success ${sortType !== SortType.LENGTH ? isLight : ''}`;\n  const reverseButtonClasses = `warning ${isReversed ? '' : isLight}`;\n  const sortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`${buttonBaseClasses}${alphabeticalButtonClasses}`}\n          onClick={sortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`${buttonBaseClasses}${lengthButtonClasses}`}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`${buttonBaseClasses}${reverseButtonClasses}`}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className={`${buttonBaseClasses}danger ${isLight}`}\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList\n        goods={getReorderedGoods(goodsFromServer, sortType, isReversed)}\n      />\n    </div>\n  );\n};\n","type GoodProps = {\n  name: string\n};\n\nexport const Good = ({ name }: GoodProps) => {\n  return <li data-cy=\"Good\">{name}</li>;\n};\n","import { Good } from './Good';\n\ntype GoddsListProps = {\n  goods: string[]\n};\n\nexport const GoodsList = ({ goods }: GoddsListProps) => {\n  return (\n    <ul>\n      {goods.map(good => <Good name={good} key={goods.indexOf(good)} />)}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}